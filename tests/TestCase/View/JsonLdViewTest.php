<?php

namespace MixerApi\JsonLdView\Test\TestCase\View;

use Cake\Controller\Controller;
use Cake\Datasource\FactoryLocator;
use Cake\Http\Response;
use Cake\Http\ServerRequest;
use Cake\ORM\Table;
use Cake\Routing\RouteBuilder;
use Cake\Routing\Router;
use Cake\TestSuite\TestCase;

class JsonLdViewTest extends TestCase
{
    /**
     * @var string[]
     */
    public array $fixtures = [
        'plugin.MixerApi/JsonLdView.Actors',
        'plugin.MixerApi/JsonLdView.FilmActors',
        'plugin.MixerApi/JsonLdView.Films',
    ];

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        static::setAppNamespace('MixerApi\JsonLdView\Test\App');
        Router::reload();
        Router::createRouteBuilder('/')->scope('/', function (RouteBuilder $builder) {
            $builder->setExtensions(['json']);
            $builder->connect('/', ['controller' => 'Actors', 'action' => 'index']);
            $builder->connect('/{controller}/{action}/*');
            $builder->connect('/{plugin}/{controller}/{action}/*');
        });
    }

    public function test_item(): void
    {
        $controller = $this->getControllerForItem();

        $controller->viewBuilder()
            ->setClassName('MixerApi/JsonLdView.JsonLd')
            ->setOptions(['serialize' => 'actor']);

        $View = $controller->createView();
        $output = $View->render();

        $this->assertIsString($output);

        $object = json_decode($output);

        $this->assertIsObject($object);

        $this->assertEquals('/actors/1', $object->{'@id'});
        $this->assertObjectHasProperty('films', $object);
        $this->assertIsArray($object->films);
    }

    public function test_item_with_no_json_options(): void
    {
        $controller = $this->getControllerForItem();

        $controller->viewBuilder()
            ->setClassName('MixerApi/JsonLdView.JsonLd')
            ->setOptions([
                'serialize' => 'actor',
                'jsonOptions' => false,
            ]);

        $View = $controller->createView();
        $output = $View->render();

        $this->assertIsString($output);

        $object = json_decode($output);

        $this->assertIsObject($object);

        $this->assertEquals('/actors/1', $object->{'@id'});
        $this->assertObjectHasProperty('films', $object);
        $this->assertIsArray($object->films);
    }

    private function getControllerForItem(): Controller
    {
        $request = new ServerRequest([
            'url' => 'actors/1',
            'params' => [
                'plugin' => null,
                'controller' => 'Actors',
                'action' => 'view',
                1
            ]
        ]);
        $request = $request->withEnv('HTTP_ACCEPT', 'application/hal+json, text/plain, */*');
        Router::setRequest($request);
        $response = new Response();

        $controller = new Controller($request, $response);
        $controller->set('modelClass', 'Actors');

        /** @var Table $actorTable */
        $actorTable = FactoryLocator::get('Table')->get('Actors');
        $actor = $actorTable->get(1,
            contain: ['Films']
        );

        $controller->set([
            'actor' => $actor,
        ]);

        return $controller;
    }
}
